name: "Enforce PR Title Format"

on:
  workflow_call:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read
  pull-requests: write
  
jobs:
  PR-Title-Check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check PR metadata
        id: check_pr
        shell: bash
        run: |
          # Check if PR author is a bot
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          if [[ "$PR_AUTHOR" =~ ^(ci-builder|renovate(\[bot\])?|bot)$ ]]; then
            echo "Skipping check: PR created by bot user ($PR_AUTHOR)"
            echo "is_bot=true" >> $GITHUB_OUTPUT
          else
            echo "is_bot=false" >> $GITHUB_OUTPUT
          fi

          # Check for CODEOWNERS file changes
          git fetch origin
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }})
          if echo "$CHANGED_FILES" | grep -qE '(^|/|\\)CODEOWNERS$'; then
            echo "Skipping check: CODEOWNERS file modified"
            echo "has_codeowners=true" >> $GITHUB_OUTPUT
          else
            echo "has_codeowners=false" >> $GITHUB_OUTPUT
          fi

      - name: Check PR title format
        if: steps.check_pr.outputs.is_bot == 'false' && steps.check_pr.outputs.has_codeowners == 'false'
        shell: bash
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ ! "$PR_TITLE" =~ ^(GG|OCS|SUPP)-[0-9]+[[:space:]].+ ]]; then
            echo "Error: PR title must follow one of the following formats:"
            echo "GG-<digits> (e.g., GG-12345 Add feature)"
            echo "OCS-<digits> (e.g., OCS-123 Fix bug)"
            echo "SUPP-<digits> (e.g., SUPP-1234 Update docs)"
            echo "Your title: $PR_TITLE"
            exit 1
          fi
          echo "PR title format is valid: $PR_TITLE"

          # --- Jira ticket validation ---
          TICKET_ID=$(echo "$PR_TITLE" | grep -oE '^(GG|OCS|SUPP)-[0-9]+')
          JIRA_API_URL="https://praveen9.atlassian.net/rest/api/2/issue/$TICKET_ID"
          JIRA_USER="madanipraveen9@gmail.com"
          JIRA_TOKEN="${{ secrets.JIRA_TOKEN }}"
          HTTP_STATUS=$(curl -s -o response.json -w "%{http_code}" -u "$JIRA_USER:$JIRA_TOKEN" -H "Accept: application/json" "$JIRA_API_URL")
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error: Jira ticket $TICKET_ID does not exist or is inaccessible (HTTP $HTTP_STATUS)."
            cat response.json
            exit 1
          fi
          echo "Jira ticket $TICKET_ID is valid."
          # --- End Jira ticket validation ---